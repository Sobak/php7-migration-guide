<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>New features</title>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>Null Coalesce Operator</title>

  <para>
   New operator has been added, which returns the result of its first operand
   if it exists and is not &null;, or else returns its second operand. This
   operator is similiar to the regular ternary operator (<literal>?</literal>),
   but it is safe to use with variables that can be &null;
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Fetches the value of $_GET['user'] and returns 'nobody' if it does not exist.
$username = $_GET['user'] ?? 'nobody';
// ...it means that it is equivalent to:
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';


// Hypothetical function fetching page from the database. If function fails, some
// default page is returned.
$page = Page::get($id) ?? $default_page;
// equivalent to:
if (($page = Page::get($id)) === NULL) {
    $page = $default_page;
}
// or written even more verbosely:
if (Page::get($id) !== NULL) {
    $page = Page::get($id);
}
else {
    $page = $default_page;
}

// Parses image metadata, and if the width is missing, assumes 100
$image = get_image_metadata(); // just a hypothetical function

$width = $image['width'] ?? 100;
// which is an equivalent to:
$width = isset($image['width']) ? $image['width'] : 100;

?>
]]>
   </programlisting>
  </informalexample>
  
  <!-- TODO: describe chaining and precedence -->
  
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>Spaceship Operator</title>
  <para>
   An <type>integer</type> less than, equal to, or greater than zero when
   <varname>$a</varname> is respectively less than, equal to, or greater
   than <varname>$b</varname>.Available as of PHP 7.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
<?php

// Integers
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Floats
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// Strings
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
 
echo "a" <=> "aa"; // -1
echo "zz" <=> "aa"; // 1

// Arrays
echo [] <=> []; // 0
echo [1, 2, 3] <=> [1, 2, 3]; // 0
echo [1, 2, 3] <=> []; // 3
echo [1, 2, 3] <=> [1, 2, 1]; // 1
echo [1, 2, 3] <=> [1, 2, 4]; // -1
]]>
   </programlisting>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.define-array">
  <title>Constant arrays using <function>define</function></title>

  <para>
   As of PHP 7.0.0 it is possible to define <type>array</type> constant using
   <function>define</function>. Defining <type>array</type> constant was possible
   as of PHP 5.6, but only using <literal>const</literal> keyword.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));

echo ANIMALS[1]; // outputs "cat"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
